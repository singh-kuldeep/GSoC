--- module-cyclocopter.cc	2016-08-23 15:40:18.524179108 +0530
+++ module-cyclocopter_kuldeep.cc	2016-08-23 15:42:51.460185358 +0530
@@ -35,22 +35,27 @@
  * Pierangelo Masarati <pierangelo.masarati@polimi.it>
  */
 
-/* Elementi di rotore */
+/* Rotor elements */
 
 #include "mbconfig.h"           /* This goes first in every *.c,*.cc file */
 
 #include <limits>
 #include <cmath>
+#include <map>
 
 #include "dataman.h"
 #include "userelem.h"
 #include "indvel.h"
 
+// For CyclocopterDMST
+#include <vector>
+#include "aeroelem.h"
+#include <complex>
+
 /* CyclocopterInflow - begin */
 
-/* Classe base per i modelli di influsso del ciclocottero:
- * tutti gli altri modelli sono ottenuti ereditando questa
- * classe
+/* Base class for cycloidal rotor  inflow models:
+ * all models a derived from this class
 */
 
 class CyclocopterInflow
@@ -59,29 +64,30 @@
 	const StructNode* pRotor;
 
 	bool bFlagAverage;
-	// == true: usa la media delle forze sul giro
-	//	per calcolare la velocità indotta per il giro successivo
-	// == false: usa il valore istantaneo (eventualmente filtrato)
-
+	// == true: uses the mean of the forces over a cycle
+	//	to calculate the induced velocity on the next rotation
+	// == false: uses an instant value (possibly filtrated)
 
 	doublereal dRadius;		// Rotor radius
 	doublereal dSpan;		// Blade length
 	doublereal dArea;		// Cylinder longitudinal area
 
 	doublereal dKappa;		// Hover correction coefficient
+	doublereal dOmega;		// Rotor Angular velocity
 
 	DriveOwner Weight;
 	doublereal dWeight;
 
 	Mat3x3 RRot;
-	/* dati che servono per il calcolo dell'output */
+
+	/* data used for output calculation */
 	Mat3x3 RRotorTranspose;
 	doublereal dUindMean;
 
-	// Coefficienti del filtro di butterworth del second'ordine
+	// Filter coefficients for the second order butteworth filter
 	doublereal a1, a2, b0, b1, b2;
 
-	// Coefficienti del filtro di butterworth del second'ordine
+	// Filter coefficients for the second order butteworth filter
 	void SetFilterCoefficients(doublereal dOmegaFilter, doublereal dDeltaT);
 
 public:
@@ -91,27 +97,27 @@
 	virtual Elem::Type GetElemType(void) const;
 	virtual InducedVelocity::Type GetInducedVelocityType(void) const;
 
-	// Elaborazione stato interno dopo la convergenza
+	// Elaborate the internal state after convergence
 	virtual void
 	AfterConvergence(const VectorHandler& X, const VectorHandler& XP);
 
-	// output; si assume che ogni tipo di elemento sappia,
-	// attraverso l'OutputHandler, dove scrivere il proprio output
+	// output; it is assumed that each element knows,
+	// by the OutputHandler, where to write its own output
 	virtual void Output(OutputHandler& OH) const;
 
-	// Contributo al file di Restart
+	// Contribution to the restart file
 	virtual std::ostream& Restart(std::ostream& out) const;
 
 	virtual void SetValue(DataManager *pDM,
 		VectorHandler& X, VectorHandler& XP,
 		SimulationEntity::Hints *ph);
 
-	// Relativo ai ...WithDofs
+	// Relative to the ...WithDofs
 	virtual void SetInitialValue(VectorHandler& X);
 
-	// *******PER IL SOLUTORE PARALLELO********
-	// Fornisce il tipo e la label dei nodi che sono connessi all'elemento
-	// utile per l'assemblaggio della matrice di connessione fra i dofs
+	// *******FOR PARALLEL SOLVER********
+	// Provides the type and label of the nodes connected to the element
+	// useful for the assembly of the DOF connexion matrix
 	virtual void
 	GetConnectedNodes(std::vector<const Node *>& connectedNodes) const;
 	// ************************************************
@@ -325,7 +331,8 @@
 	DriveCaller *& pdW,
 	doublereal& dOmegaFilter,
 	doublereal& dKappa,
-	doublereal& dDeltaT)
+	doublereal& dDeltaT,
+	doublereal& dOmega)
 {
 	bFlagAve = HP.GetYesNoOrBool();
 
@@ -397,6 +404,18 @@
 		dDeltaT = 0.;
 	}
 
+	dOmega = 1.;
+	if (HP.IsKeyWord("omega")) {
+		dOmega = HP.GetReal();
+		if (dOmega <= 0) {
+			silent_cerr("Illegal null or negative omega"
+			    << uLabel
+				<< " at line " << HP.GetLineData()
+				<< std::endl);
+			return false;
+		}
+	}
+
 	return true;
 }
 
@@ -412,35 +431,35 @@
 		DataManager* pDM, MBDynParser& HP);
 	virtual ~CyclocopterNoInflow(void);
 
-	// assemblaggio residuo
+	// residual assembly
 	virtual SubVectorHandler&
 	AssRes(SubVectorHandler& WorkVec,
 		doublereal dCoef,
 		const VectorHandler& XCurr,
 		const VectorHandler& XPrimeCurr);
 
-	// Somma alla trazione il contributo di un elemento
+	// Adds to the forces the contribution from an element
 	virtual void
 	AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X);
 
-	// Restituisce ad un elemento la velocita' indotta
-	// in base alla posizione azimuthale
+	// Restores the induced velocity to an element
+	// based on the azimuth position
 	virtual Vec3 GetInducedVelocity(Elem::Type type,
 		unsigned uLabel, unsigned uPnt, const Vec3& X) const;
 
-	// Restituisce ad un elemento la velocità indotta
-	// in base alla posizione azimuthale (usata per
-	// iterare tra calcolo della valocità indotta e
-	// calcolo delle forze aerodinamiche - solo
-	// per il modello di influsso KARI per il ciclocottero)
+	// Restores the induced velocity to an element
+	// based on the azimuth position (used to
+	// iterare between induced velocity calculation and
+	// calculation of aerodynamic forces
+	// for the KARI induced velocity model of the cycloidal rotor)
 #if 0
 	virtual void GetInducedVelocityIter(const Vec3& X, const Vec3& T, doublereal *UindM, doublereal dTn0, doublereal dTn_dUindM) {
 		NO_OP;
 	};
 #endif
 
-	// Restituisce la velocità indotta dalla metà superiore del rotore
-	// ( solo per KARI ciclocottero)
+	// Restores the induced velocity dalla metà superiore del rotore
+	// ( only for KARI cycloidal rotor)
 	virtual doublereal GetW(const Vec3& X) const {
 		return 0.;
 	}
@@ -524,7 +543,7 @@
 void
 CyclocopterNoInflow::AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X)
 {
-	/* Sole se deve fare l'output calcola anche il momento */
+	/* Calculates the moment only if output is required */
 	if (bToBeOutput()) {
 		Res.AddForces(F, M, X);
 		InducedVelocity::AddForce(pEl, pNode, F, M, X);
@@ -572,7 +591,7 @@
 
 	unsigned int iStepCounter;
 
-	/* dati per il filtraggio delle forze */
+	/* data for force filtering */
 	doublereal Uk, Uk_1, Uk_2, Yk, Yk_1, Yk_2;
 
 public:
@@ -580,43 +599,43 @@
 		DataManager* pDM, MBDynParser& HP);
 	virtual ~CyclocopterUniform1D(void);
 
-	// Elaborazione stato interno dopo la convergenza
+	// Elaborate internal state after convergence
 	virtual void
 	AfterConvergence(const VectorHandler& X, const VectorHandler& XP);
 
-	// output; si assume che ogni tipo di elemento sappia,
-	// attraverso l'OutputHandler, dove scrivere il proprio output
+	// output; it is assumed that each element knows,
+	// by the OutputHandler, where to write its own output
 	virtual void Output(OutputHandler& OH) const;
 
-	// assemblaggio residuo
+	// residual assembly
 	virtual SubVectorHandler&
 	AssRes(SubVectorHandler& WorkVec,
 		doublereal dCoef,
 		const VectorHandler& XCurr,
 		const VectorHandler& XPrimeCurr);
 
-	// Somma alla trazione il contributo di un elemento
+	// Adds to the forces the contribution from an element
 	virtual void
 	AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X);
 
-	// Restituisce ad un elemento la velocita' indotta
-	// in base alla posizione azimuthale
+	// Restores the induced velocity to an element
+	// based on the azimuth position
 	virtual Vec3 GetInducedVelocity(Elem::Type type,
 		unsigned uLabel, unsigned uPnt, const Vec3& X) const;
 
-	// Restituisce ad un elemento la velocità indotta
-	// in base alla posizione azimuthale (usata per
-	// iterare tra calcolo della valocità indotta e
-	// calcolo delle forze aerodinamiche - solo
-	// per il modello di influsso KARI per il ciclocottero)
+	// Restores the induced velocity to an element
+	// based on the azimuth position (used to
+	// iterare between induced velocity calculation and
+	// calculation of aerodynamic forces
+	// for the KARI induced velocity model of the cycloidal rotor)
 #if 0
 	virtual void GetInducedVelocityIter(const Vec3& X, const Vec3& T, doublereal *UindM, doublereal dTn0, doublereal dTn_dUindM) {
 		NO_OP;
 	};
 #endif
 
-	// Restituisce la velocità indotta dalla metà superiore del rotore
-	// ( solo per KARI ciclocottero)
+	// Restores the induced velocity from the higher half of the rotor
+	// ( only for KARI cycloidal rotor)
 	virtual doublereal GetW(const Vec3& X) const {
 		return 0.;
 	};
@@ -690,7 +709,7 @@
 	DriveCaller *pdW = 0;
 	doublereal dOmegaFilter;
 	doublereal dDeltaT;
-	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT)) {
+	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT, dOmega)) {
 		throw ErrGeneric(MBDYN_EXCEPT_ARGS);
 	}
 
@@ -742,7 +761,7 @@
 CyclocopterUniform1D::AfterConvergence(const VectorHandler& X, const VectorHandler& XP)
 {
 	bFlagIsFirstBlade = true;
-	/* calcolo la forza media sul giro generata dal rotore */
+	/* calculates the mean of the forces generated by the rotor over a cycle*/
 	dTzMean += dTz;
 	FMean += F;
 	iStepCounter++;
@@ -762,7 +781,7 @@
 	}
 	dAzimuthPrev = dAzimuth;
 
-	/* aggiorno ingressi e uscite del filtro */
+	/* update the inputs and outputs of the filter */
 	Yk_2 = Yk_1;
 	Yk_1 = Yk;
 	Uk_2 = Uk_1;
@@ -791,15 +810,15 @@
 	const VectorHandler& XPrimeCurr)
 {
 	/* UNIFORM induced velocity (Moble version)*/
-	/* Trasporta della matrice di rotazione del rotore */
+	/* Transpose of the rotor rotation matrix */
 	RRotor = pCraft->GetRCurr()*RRot;
 	RRot3 = RRotor.GetVec(3);
 	RRotorTranspose = RRotor.Transpose();
-	/* Forze nel sistema rotore */
+	/* Force in the rotor coordinate system */
 	F = RRotorTranspose*Res.Force();
 	dTz = RRot3*Res.Force();
 	if (!bFlagAverage) {
-		/* filtro le forze */
+		/* filter the forces */
 		Uk = dTz;
 		Yk = -Yk_1*a1 - Yk_2*a2 + Uk*b0 + Uk_1*b1 + Uk_2*b2;
 		dTz = Yk;
@@ -819,7 +838,7 @@
 CyclocopterUniform1D::AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X)
 {
 
-	/* colcolo la posizione azimutale della prima pala */
+	/* Calculates the azimuth position of the first blade */
 	if (bFlagIsFirstBlade == true) {
 		Vec3 XRel(RRotorTranspose*(X - pRotor->GetXCurr()));
 		doublereal d1 = XRel(2);
@@ -829,7 +848,7 @@
 	}
 
 
-	/* Sole se deve fare l'output calcola anche il momento */
+	/* Calculates the moment only if output is required */
 	if (bToBeOutput()) {
 		Res.AddForces(F, M, X);
 		InducedVelocity::AddForce(pEl, pNode, F, M, X);
@@ -843,6 +862,14 @@
 CyclocopterUniform1D::GetInducedVelocity(Elem::Type type,
 	unsigned uLabel, unsigned uPnt, const Vec3& X) const
 {
+	Vec3 temp;
+	temp(1) = 1 ; 
+	temp(2) = 1 ; 
+	temp(3) = 1 ; 
+	// std::cout << std::abs(temp) << std::endl;
+	std::cout << "okay"  << std::endl;
+	std::cout << RRot3 << std::endl;
+
 	return RRot3*dUindMean;
 }
 
@@ -875,7 +902,7 @@
 
 	unsigned int iStepCounter;
 
-	/* dati per il filtraggio delle forze */
+	/* data for force filtering */
 	Vec3 Uk, Uk_1, Uk_2, Yk, Yk_1, Yk_2;
 
 public:
@@ -883,43 +910,43 @@
 		DataManager* pDM, MBDynParser& HP);
 	virtual ~CyclocopterUniform2D(void);
 
-	// Elaborazione stato interno dopo la convergenza
+	// Elaborate internal state after convergence
 	virtual void
 	AfterConvergence(const VectorHandler& X, const VectorHandler& XP);
 
-	// output; si assume che ogni tipo di elemento sappia,
-	// attraverso l'OutputHandler, dove scrivere il proprio output
+	// output; it is assumed that each element knows,
+	// by the OutputHandler, where to write its own output
 	virtual void Output(OutputHandler& OH) const;
 
-	// assemblaggio residuo
+	// residual assembly
 	virtual SubVectorHandler&
 	AssRes(SubVectorHandler& WorkVec,
 		doublereal dCoef,
 		const VectorHandler& XCurr,
 		const VectorHandler& XPrimeCurr);
 
-	// Somma alla trazione il contributo di un elemento
+	// Adds to the forces the contribution from an element
 	virtual void
 	AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X);
 
-	// Restituisce ad un elemento la velocita' indotta
-	// in base alla posizione azimuthale
+	// Restores the induced velocity to an element
+	// based on the azimuth position
 	virtual Vec3 GetInducedVelocity(Elem::Type type,
 		unsigned uLabel, unsigned uPnt, const Vec3& X) const;
 
-	// Restituisce ad un elemento la velocità indotta
-	// in base alla posizione azimuthale (usata per
-	// iterare tra calcolo della valocità indotta e
-	// calcolo delle forze aerodinamiche - solo
-	// per il modello di influsso KARI per il ciclocottero)
+	// Restores the induced velocity to an element
+	// based on the azimuth position (used to
+	// iterare between induced velocity calculation and
+	// calculation of aerodynamic forces
+	// for the KARI induced velocity model of the cycloidal rotor)
 #if 0
 	virtual void GetInducedVelocityIter(const Vec3& X, const Vec3& T, doublereal *UindM, doublereal dTn0, doublereal dTn_dUindM) {
 		NO_OP;
 	};
 #endif
 
-	// Restituisce la velocità indotta dalla metà superiore del rotore
-	// ( solo per KARI ciclocottero)
+	// Restores the induced velocity dalla metà superiore del rotore
+	// ( only for KARI cycloidal rotor)
 	virtual doublereal GetW(const Vec3& X) const {
 		return 0.;
 	};
@@ -991,7 +1018,7 @@
 	DriveCaller *pdW = 0;
 	doublereal dOmegaFilter;
 	doublereal dDeltaT;
-	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT)) {
+	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT, dOmega)) {
 		throw ErrGeneric(MBDYN_EXCEPT_ARGS);
 	}
 
@@ -1044,19 +1071,19 @@
 	bFlagIsFirstBlade = true;
 #if 0
 	if (bFlagAverage) {
-		/* calcolo la forza media sul giro generata dal rotore */
+		/* calculates the mean of the forces generated by the rotor over a cycle*/
 		FMean = FMean + F;
 		iStepCounter++;
 		// if ((dAzimuth > 0. && dAzimuthPrev < 0.) || (dAzimuth < 0. && dAzimuthPrev > 0.)) {
 		if ((dAzimuth > 0. && dAzimuthPrev < 0.)) {
 			FMean = FMean/iStepCounter;
-			/* Forza nel piano normale all'asse di rotazione */
+			/* Force in the plane normal to the rotation axis */
 			doublereal dT = sqrt(FMean(2)*FMean(2) + FMean(3)*FMean(3));
-			/* Velocità indotta: calcolata in base alla dT */
+			/* Induced velocity: calculated according to dT */
 			doublereal dRho = dGetAirDensity(GetXCurr());
 			dUindMean = sqrt(dT/(2*dRho*dArea));
-			/* Componenti della velocità indotta nel sistema
-	 		* rotore */
+			/* Induced velocity components in the coordinate
+	 		* system of the rotor */
 			dUind = 0.;
 			if (dT > std::numeric_limits<doublereal>::epsilon()) {
 				dUind(2) = dUindMean*FMean(2)/dT;
@@ -1072,20 +1099,20 @@
 	}
 #endif
 
-	/* calcolo la forza media sul giro generata dal rotore */
+	/* calculates the mean of the forces generated by the rotor over a cycle*/
 	FMean = FMean + F;
 	iStepCounter++;
 	if ((dAzimuth > 0. && dAzimuthPrev < 0.)) {
 		FMean = FMean/iStepCounter;
 		FMeanOut = FMean;
 		if (bFlagAverage) {
-			/* Forza nel piano normale all'asse di rotazione */
+			/* Force in the plane normal to the rotation axis */
 			doublereal dT = sqrt(FMean(2)*FMean(2) + FMean(3)*FMean(3));
-			/* Velocità indotta: calcolata in base alla dT */
+			/* Induced velocity: calculated according to dT */
 			doublereal dRho = dGetAirDensity(GetXCurr());
 			dUindMean = dKappa*sqrt(dT/(2*dRho*dArea));
-			/* Componenti della velocità indotta nel sistema
-	 		* rotore */
+			/* Induced velocity components in the coordinate
+	 		* system of the rotor */
 			dUind = ::Zero3;
 			if (dT > std::numeric_limits<doublereal>::epsilon()) {
 				dUind(2) = dUindMean*FMean(2)/dT;
@@ -1104,7 +1131,7 @@
 
 	dUindPrev = dUind;
 
-	/* aggiorno ingressi e uscite del filtro */
+	/* update the inputs and outputs of the filter */
 	Yk_2 = Yk_1;
 	Yk_1 = Yk;
 	Uk_2 = Uk_1;
@@ -1132,23 +1159,23 @@
 	const VectorHandler& XPrimeCurr)
 {
 	/* UNIFORM induced velocity */
-	/* Trasporta della matrice di rotazione del rotore */
+	/* Transpose of the rotor rotation matrix */
 	RRotor = pCraft->GetRCurr()*RRot;
 	RRotorTranspose = RRotor.Transpose();
-	/* Forze nel sistema rotore */
+	/* Force in the rotor coordinate system */
 	F = RRotorTranspose*Res.Force();
 	if (!bFlagAverage) {
-		/* filtro le forze */
+		/* filter the forces */
 		Uk = F;
 		Yk = -Yk_1*a1 - Yk_2*a2 + Uk*b0 + Uk_1*b1 + Uk_2*b2;
 		F = Yk;
-		/* Forza nel piano normale all'asse di rotazione */
+		/* Force in the plane normal to the rotation axis */
 		doublereal dT = sqrt(F(2)*F(2) + F(3)*F(3));
-		/* Velocità indotta: calcolata in base alla dT */
+		/* Induced velocity: calculated according to dT */
 		doublereal dRho = dGetAirDensity(GetXCurr());
 		dUindMean = dKappa*sqrt(dT/(2*dRho*dArea));
-		/* Componenti della velocità indotta nel sistema
-	 	* rotore */
+		/* Induced velocity components in the coordinate
+	 	* system of the rotor */
 		dUind = ::Zero3;
 		if (dT > std::numeric_limits<doublereal>::epsilon()) {
 			dUind(2) = dUindMean*F(2)/dT;
@@ -1170,7 +1197,7 @@
 void
 CyclocopterUniform2D::AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X)
 {
-	/* colcolo la posizione azimutale della prima pala */
+	/* Calculates the azimuth position of the first blade */
 	// if (bFlagIsFirstBlade && bFlagAverage) {
 	if (bFlagIsFirstBlade) {
 		Vec3 XRel(RRotorTranspose*(X - pRotor->GetXCurr()));
@@ -1180,7 +1207,7 @@
 		bFlagIsFirstBlade = false;
 	}
 
-	/* Sole se deve fare l'output calcola anche il momento */
+	/* Calculates the moment only if output is required */
 	if (bToBeOutput()) {
 		Res.AddForces(F, M, X);
 		InducedVelocity::AddForce(pEl, pNode, F, M, X);
@@ -1195,7 +1222,10 @@
 	unsigned uLabel, unsigned uPnt, const Vec3& X) const
 {
 	//printf("%f %f %f\n",dUind(1),dUind(2),dUind(3));
+	std::cout << RRotor << std::endl;
+	
 	return RRotor*dUind;
+
 }
 
 /* CyclocopterUniform2D - end */
@@ -1235,7 +1265,7 @@
 
 	unsigned int iStepCounter;
 
-	/* dati per il filtraggio delle forze */
+	/* data for force filtering */
 	Vec3 Uk, Uk_1, Uk_2, Yk, Yk_1, Yk_2;
 
 	unsigned int iCounter;
@@ -1250,43 +1280,43 @@
 		DataManager* pDM, MBDynParser& HP);
 	virtual ~CyclocopterPolimi(void);
 
-	// Elaborazione stato interno dopo la convergenza
+	// Elaborate internal state after convergence
 	virtual void
 	AfterConvergence(const VectorHandler& X, const VectorHandler& XP);
 
-	// output; si assume che ogni tipo di elemento sappia,
-	// attraverso l'OutputHandler, dove scrivere il proprio output
+	// output; it is assumed that each element knows,
+	// by the OutputHandler, where to write its own output
 	virtual void Output(OutputHandler& OH) const;
 
-	// assemblaggio residuo
+	// residual assembly
 	virtual SubVectorHandler&
 	AssRes(SubVectorHandler& WorkVec,
 		doublereal dCoef,
 		const VectorHandler& XCurr,
 		const VectorHandler& XPrimeCurr);
 
-	// Somma alla trazione il contributo di un elemento
+	// Adds to the forces the contribution from an element
 	virtual void
 	AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X);
 
-	// Restituisce ad un elemento la velocita' indotta
-	// in base alla posizione azimuthale
+	// Restores the induced velocity to an element
+	// based on the azimuth position
 	virtual Vec3 GetInducedVelocity(Elem::Type type,
 		unsigned uLabel, unsigned uPnt, const Vec3& X) const;
 
-	// Restituisce ad un elemento la velocità indotta
-	// in base alla posizione azimuthale (usata per
-	// iterare tra calcolo della valocità indotta e
-	// calcolo delle forze aerodinamiche - solo
-	// per il modello di influsso KARI per il ciclocottero)
+	// Restores the induced velocity to an element
+	// based on the azimuth position (used to
+	// iterare between induced velocity calculation and
+	// calculation of aerodynamic forces
+	// for the KARI induced velocity model of the cycloidal rotor)
 #if 0
 	virtual void GetInducedVelocityIter(const Vec3& X, const Vec3& T, doublereal *UindM, doublereal dTn0, doublereal dTn_dUindM) {
 		NO_OP;
 	};
 #endif
 
-	// Restituisce la velocità indotta dalla metà superiore del rotore
-	// ( solo per KARI ciclocottero)
+	// Restores the induced velocity dalla metà superiore del rotore
+	// ( only for per KARI cycloidal rotor)
 	virtual doublereal GetW(const Vec3& X) const {
 		return 0.;
 	};
@@ -1362,7 +1392,7 @@
 	DriveCaller *pdW = 0;
 	doublereal dOmegaFilter;
 	doublereal dDeltaT;
-	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT)) {
+	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT, dOmega)) {
 		throw ErrGeneric(MBDYN_EXCEPT_ARGS);
 	}
 
@@ -1385,7 +1415,7 @@
 CyclocopterPolimi::AfterConvergence(const VectorHandler& X, const VectorHandler& XP)
 {
 	bFlagIsFirstBlade = true;
-	/* calcolo la forza media sul giro generata dal rotore */
+	/* calculates the mean of the forces generated by the rotor over a cycle*/
 	FMean = FMean + F;;
 	iStepCounter++;
 	// if ((dAzimuth > 0. && dAzimuthPrev < 0.) || (dAzimuth < 0. && dAzimuthPrev > 0.)) {
@@ -1393,13 +1423,13 @@
 		FMean = FMean/iStepCounter;
 		FMeanOut = FMean;
 		if (bFlagAverage) {
-			/* Forza nel piano normale all'asse di rotazione */
+			/* Force in the plane normal to the rotation axis */
 			doublereal dT = sqrt(FMean(2)*FMean(2) + FMean(3)*FMean(3));
-			/* Velocità indotta: calcolata in base alla dT */
+			/* Induced velocity: calculated according to dT */
 			doublereal dRho = dGetAirDensity(GetXCurr());
 			dUindMean = dKappa*sqrt(dT/(2*dRho*dArea));
-			/* Componenti della velocità indotta nel sistema
-	 		* rotore */
+			/* Induced velocity components in the coordinate
+	 		* system of the rotor */
 			dUind = Zero3;
 			if (dT > std::numeric_limits<doublereal>::epsilon()) {
 				dUind(2) = dUindMean*FMean(2)/dT;
@@ -1408,7 +1438,7 @@
 			dUind(1) = (1 - dWeight)*dUind(1) + dWeight*dUindPrev(1);
 			dUind(2) = (1 - dWeight)*dUind(2) + dWeight*dUindPrev(2);
 			dUind(3) = (1 - dWeight)*dUind(3) + dWeight*dUindPrev(3);
-			/* angolo di cui è ruotata la trazione */
+			/* angle by which the tension is rotated */
 			dXi = atan2(FMean(3), FMean(2)) - M_PI/2.;
 		}
 
@@ -1420,7 +1450,7 @@
 
 	dUindPrev = dUind;
 
-	/* aggiorno ingressi e uscite del filtro */
+	/* update the inputs and outputs of the filter */
 	Yk_2 = Yk_1;
 	Yk_1 = Yk;
 	Uk_2 = Uk_1;
@@ -1475,23 +1505,23 @@
 	const VectorHandler& XPrimeCurr)
 {
 	/* UNIFORM induced velocity */
-	/* Trasporta della matrice di rotazione del rotore */
+	/* Transpose of the rotor rotation matrix */
 	RRotor = pCraft->GetRCurr()*RRot;
 	RRotorTranspose = RRotor.Transpose();
-	/* Forze nel sistema rotore */
+	/* Force in the rotor coordinate system */
 	F = RRotorTranspose*Res.Force();
 	if (!bFlagAverage) {
-		/* filtro le forze */
+		/* filter the forces */
 		Uk = F;
 		Yk = -Yk_1*a1 - Yk_2*a2 + Uk*b0 + Uk_1*b1 + Uk_2*b2;
 		F = Yk;
-		/* Forza nel piano normale all'asse di rotazione */
+		/* Force in the plane normal to the rotation axis */
 		doublereal dT = sqrt(F(2)*F(2) + F(3)*F(3));
-		/* Velocità indotta: calcolata in base alla dT */
+		/* Induced velocity: calculated according to dT */
 		doublereal dRho = dGetAirDensity(GetXCurr());
 		dUindMean = dKappa*sqrt(dT/(2*dRho*dArea));
-		/* Componenti della velocità indotta nel sistema
-	 	* rotore */
+		/* Induced velocity components in the coordinate
+	 	* system of the rotor */
 		dUind = Zero3;
 		if (dT > std::numeric_limits<doublereal>::epsilon()) {
 			dUind(2) = dUindMean*F(2)/dT;
@@ -1502,7 +1532,7 @@
 		dUind(3) = (1 - dWeight)*dUind(3) + dWeight*dUindPrev(3);
 
 		dUindMean = sqrt(dUind(1)*dUind(1) + dUind(2)*dUind(2) + dUind(3)*dUind(3));
-		/* angolo di cui è ruotata la trazione */
+		/* angle by which the tension is rotated */
 		dXi = atan2(F(3), F(2)) - M_PI/2.;
 	}
 
@@ -1515,7 +1545,7 @@
 void
 CyclocopterPolimi::AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X)
 {
-	/* colcolo la posizione azimutale della prima pala */
+	/* Calculates the azimuth position of the first blade */
 	if (bFlagIsFirstBlade) {
 		Vec3 XRel(RRotorTranspose*(X - pRotor->GetXCurr()));
 		doublereal d1 = XRel(2);
@@ -1524,7 +1554,7 @@
 		bFlagIsFirstBlade = false;
 	}
 
-	/* Sole se deve fare l'output calcola anche il momento */
+	/* Calculates the moment only if output is required */
 	if (bToBeOutput()) {
 		Res.AddForces(F,M,X);
 		InducedVelocity::AddForce(pEl, pNode, F, M, X);
@@ -1543,8 +1573,8 @@
 	doublereal d1 = XRel(2);
 	doublereal d2 = XRel(3);
 
-	/* dPsi0 non serve a nulla perchè uso l'angolo
-	 * relativo: (dp-dXi)!!! */
+	/* dPsi0 is useless because the relative
+	 * angle is used: (dp-dXi)!!! */
 	doublereal dpp = atan2(d2, d1);
 
 	doublereal r = sqrt(d1*d1 + d2*d2)*cos(dpp - dXi);
@@ -1554,6 +1584,792 @@
 
 /* CyclocopterPolimi - end */
 
+
+/*AUTHOR: Kuldeep Singh <kuldeepsingh050895@gmail.com>
+Copyright (C) 2016(-2016) all rights reserved.
+The copyright of this patch is transferred
+to Pierangelo Masarati and Paolo Mantegazza
+for use in the software MBDyn as described 
+in the GNU Public License version 2.1 */
+
+#if 1
+/* CyclocopterDMST - begin */
+
+/*
+Double Multiple Stream Tube inflow Model: 
+The induced velocity at a particular azimuth location is opposite to 
+the "blade force at that azimuth location" and in the plane
+perpendicular to the rotor rotation axis. The
+rotor reference must have direction 1 aligned
+with the rotor rotation axis!
+*/
+
+class CyclocopterDMST
+: virtual public Elem, public CyclocopterInflow {
+protected:
+	Mat3x3 RRotor;
+	
+	Vec3 dUind;
+	mutable Vec3 dUindPrev;
+
+	int NBlades;
+	std::vector<unsigned> uBlade; // to store the blade labels
+	std::vector<const Elem*> pBlade; 
+	std::vector<const AerodynamicBody*> pBladeAero; // stores the blade pointers
+
+	std::vector<Vec3> dUindBlade;
+	mutable std::vector<Vec3> dUindPrevBlade;
+
+	std::vector<Vec3> dBladeFroce; // Blade force in global reference frame
+
+	// This stores the induce velocity magnitude at each azimuth location
+	// this will be updated after every iteration to keep the it updated
+	// Length of this array will be (2*PI/(dOmega*dDeltaT)), which is equal to twice of stream tubes  
+	std::vector<doublereal> dIndVelMegAll; 
+	
+	std::vector<Vec3> dBladePos; // Blade position in global reference frame
+	std::vector<doublereal> dAngleBtBladeAndNetforce;  // angle between Blade position with respect to Net rotor force vector 
+	std::vector<doublereal> dBladeUindMag; // Blade induced velocity magnitude 
+
+	// induced velocity vectors at each blade 
+	std::vector<Vec3> dBladeUind; 
+	std::vector<Vec3> dBladeUindPrev; 
+
+	bool bFlagIsFirstBlade;
+
+	doublereal dAzimuth, dAzimuthPrev;
+
+	Vec3 F, FMean, FMeanOut;
+
+	unsigned int iStepCounter;
+	doublereal dDeltaT;
+
+	// Will make sure there are dIndVelMegAll do not have empty elements
+	bool EmptyCheck; // Initially dIndVelMegAll is empty
+
+	/* data for force filtering */
+	Vec3 Uk, Uk_1, Uk_2, Yk, Yk_1, Yk_2;
+
+public:
+	CyclocopterDMST(unsigned int uL, const DofOwner* pDO,
+		DataManager* pDM, MBDynParser& HP);
+	virtual ~CyclocopterDMST(void);
+
+	// Elaborate internal state after convergence
+	virtual void
+	AfterConvergence(const VectorHandler& X, const VectorHandler& XP);
+
+	// output; it is assumed that each element knows,
+	// by the OutputHandler, where to write its own output
+	virtual void Output(OutputHandler& OH) const;
+
+	// residual assembly
+	virtual SubVectorHandler&
+	AssRes(SubVectorHandler& WorkVec,
+		doublereal dCoef,
+		const VectorHandler& XCurr,
+		const VectorHandler& XPrimeCurr);
+
+	// Adds to the forces the contribution from an element
+	virtual void
+	AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X);
+	
+	virtual void SetValue(DataManager *pDM,
+		VectorHandler& X, VectorHandler& XP,
+		SimulationEntity::Hints *ph);
+
+	// Restores the induced velocity to an element
+	// based on the azimuth position
+	virtual Vec3 GetInducedVelocity(Elem::Type type,
+		unsigned uLabel, unsigned uPnt, const Vec3& X) const;
+
+	// Restores the induced velocity to an element
+	// based on the azimuth position (used to
+	// iterate between induced velocity calculation and
+	// calculation of aerodynamic forces
+	// for the KARI induced velocity model of the cycloidal rotor)
+#if 0
+	virtual void GetInducedVelocityIter(const Vec3& X, const Vec3& T, doublereal *UindM, doublereal dTn0, doublereal dTn_dUindM) {
+		NO_OP;
+	};
+#endif
+
+	// ( only for KARI cycloidal rotor)
+	virtual doublereal GetW(const Vec3& X) const {
+		return 0.;
+	};
+
+	virtual doublereal GetPsi(const Vec3& X) const {
+		return 0.;
+	};
+
+	virtual Mat3x3 GetRRotor(const Vec3& X) const {
+		return ::Zero3x3;
+	};
+};
+
+CyclocopterDMST::CyclocopterDMST(unsigned int uL, const DofOwner* pDO,
+	DataManager* pDM, MBDynParser& HP)
+: Elem(uL, flag(0)),
+CyclocopterInflow(uL, pDO),
+RRotor(::Eye3),
+dUind(::Zero3), dUindPrev(::Zero3),
+bFlagIsFirstBlade(true),
+dAzimuth(0.), dAzimuthPrev(0.),
+F(::Zero3), FMean(::Zero3), FMeanOut(::Zero3),
+iStepCounter(0),
+Uk(::Zero3), Uk_1(::Zero3), Uk_2(::Zero3), Yk(::Zero3), Yk_1(::Zero3), Yk_2(::Zero3),
+EmptyCheck(true)
+{
+	if (HP.IsKeyWord("help")) {
+		silent_cout(
+"									\n"
+"Module: 	Cyclocopter						\n"
+"Author: 	Kuldeep Singh <kuldeepsingh050895@gmail.com>	\n"
+"Mentored by: Louis Gagnon <louis.gagnon@polimi.it> \n" "based on work by							\n"
+"		Mattia Mattaboni <mattia.mattaboni@mail.polimi.it>	\n"
+"Organization:	Dipartimento di Scienze e Tecnologie Aerospaziali	\n"
+"		Politecnico di Milano					\n"
+"		http://www.aero.polimi.it/				\n"
+" Description:	This module implements induced velocity models	\n"
+"		for cycloidal rotors using Double Multiple Stream Tube method. \n"
+"									\n"
+"	All rights reserved.						\n"
+"\n"
+" Usage:\n"
+"	user element: <label> , cycloidal DMST ,\n"
+"		<aircraft_node_label> ,\n"
+"		[ orientation , (OrientationMatrix) <orientation> , ]\n"
+"		<rotor_node_label>\n"
+"		(bool) <average> ,\n"
+"		<rotor_radius> ,\n"
+"		<blade_span>\n"
+"		[ , delay , (DriveCaller) <delay> ]\n"
+"		[ , omegacut , <cut_frequency> ]\n"
+"		[ , kappa , <hover_correction_coefficient> ]\n"
+"		[ , timestep , <time_step> ]\n"
+"		[ , <output_data> ]\n"
+"	;\n"
+			<< std::endl);
+
+		if (!HP.IsArg()) {
+			/*
+			 * Exit quietly if nothing else is provided
+			 */
+			throw NoErr(MBDYN_EXCEPT_ARGS);
+		}
+	}
+
+	if (!ReadRotorData(pDM, HP, uLabel, pCraft, RRot, pRotor)) {
+		throw ErrGeneric(MBDYN_EXCEPT_ARGS);
+	}
+
+	DriveCaller *pdW = 0;
+	doublereal dOmegaFilter;
+	// doublereal dDeltaT;
+	
+	if (!ReadUniform(pDM, HP, uLabel, bFlagAverage, dRadius, dSpan, pdW, dOmegaFilter, dKappa, dDeltaT, dOmega)) {
+		throw ErrGeneric(MBDYN_EXCEPT_ARGS);
+	}
+
+	ppRes = ReadResSets(pDM, HP);
+
+	//reading labels from input file ans later use something like push_pack function so that fix number 6 do not come into the picture  
+	uBlade.resize(6);
+	/*this 6 should be replaced by Number of blades*/
+	NBlades = uBlade.size();
+	for (int i = 0; i < NBlades; ++i)
+	{
+		// After reading the labels fix the no of blades 
+		uBlade[i] = HP.GetInt(); 
+	}
+
+	SetOutputFlag(pDM->fReadOutput(HP, Elem::INDUCEDVELOCITY));
+
+	dArea = 2*dRadius*dSpan;
+	Weight.Set(pdW);
+
+	SetFilterCoefficients(dOmegaFilter, dDeltaT);
+}
+
+CyclocopterDMST::~CyclocopterDMST(void)
+{
+	NO_OP;
+}
+
+void
+CyclocopterDMST::SetValue(DataManager *pDM,
+	VectorHandler& X, VectorHandler& XP,
+	SimulationEntity::Hints *ph)
+{
+	// Fixing the size of pointer storage vectors
+	pBlade.resize(NBlades);
+	pBladeAero.resize(NBlades);
+	
+	// Assigning the pointers
+	for (int i = 0; i < NBlades; ++i)
+	{
+		pBlade[i] = pDM->pFindElem(Elem::AERODYNAMIC,uBlade[i]);
+		pBladeAero[i] = dynamic_cast< const AerodynamicBody *>(pBlade[i]);
+	}
+
+	//Defining the size to store the corresponding values
+	dBladeFroce.resize(NBlades); 
+	dBladePos.resize(NBlades); 
+	dAngleBtBladeAndNetforce.resize(NBlades); 
+	dBladeUind.resize(NBlades);
+	dBladeUindPrev.resize(NBlades);
+	dBladeUindMag.resize(NBlades);
+	dIndVelMegAll.resize(floor(2*M_PI/(dOmega*dDeltaT)));
+	// ~ NO_OP;
+}
+
+void
+CyclocopterDMST::Output(OutputHandler& OH) const
+{
+	if (bToBeOutput()) {
+                OH.Loadable()
+                        << std::setw(8) << GetLabel()   		/* 1 */
+                        << " " << RRotorTranspose*Res.Force()   /* 2-4 */
+                        << " " << RRotorTranspose*Res.Moment()  /* 5-7 */
+                        << " " << dUindMean                	 	/* 8 */
+                        << " " << iStepCounter             	 	/* 9 */
+                        << " " << dAzimuth               		/* 10 */ // First blade azimuth location
+                        << " " << dBladeUind[0]            	 	/* 11-13 */ // Induced velocity at first blade
+                        << " " << FMeanOut                	 	/* 14-16 */
+                        << std::endl;
+
+                /* FIXME: check for parallel stuff ... */
+                for (int i = 0; ppRes && ppRes[i]; i++) {
+                        OH.Loadable()
+                                << std::setw(8) << GetLabel()
+                                << ":" << ppRes[i]->GetLabel()
+                                << " " << ppRes[i]->pRes->Force()
+                                << " " << ppRes[i]->pRes->Moment()
+                                << std::endl;
+                }
+	}
+
+}
+
+void
+CyclocopterDMST::AfterConvergence(const VectorHandler& X, const VectorHandler& XP)
+{
+	bFlagIsFirstBlade = true;
+
+	/* calculates the mean of the forces generated by the rotor over a cycle*/
+	FMean = FMean + F;
+	iStepCounter++;
+
+	// Once the array dIndVelMegAll is full switch to full DMST model 
+	if (iStepCounter > floor(2*M_PI/(NBlades*dOmega*dDeltaT)) )
+	{	
+		EmptyCheck = false;
+	}
+
+	if ((dAzimuth > 0. && dAzimuthPrev < 0.)) 
+	{
+		FMean = FMean/iStepCounter;
+		FMeanOut = FMean;
+		FMean = ::Zero3;
+		iStepCounter = 0;
+	}
+
+	dAzimuthPrev = dAzimuth;
+
+	dUindPrev = dUind;
+
+	for (int i = 0; i < NBlades; ++i)
+	{
+		// After convergence storing the converged value of induced velocity
+		dBladeUindPrev[i] = dBladeUind[i]; 
+	}
+
+	/* update the inputs and outputs of the filter */
+	Yk_2 = Yk_1;
+	Yk_1 = Yk;
+	Uk_2 = Uk_1;
+	Uk_1 = Uk;
+
+	dWeight = Weight.dGet();
+	if (dWeight < 0.) {
+		silent_cout("Rotor(" << GetLabel() << "): "
+			"delay < 0.0; using 0.0" << std::endl);
+		dWeight = 0.;
+
+	} else if (dWeight > 1.) {
+		silent_cout("Rotor(" << GetLabel() << "): "
+			"delay > 1.0; using 1.0" << std::endl);
+		dWeight = 1.;
+	}
+
+	InducedVelocity::AfterConvergence(X, XP);
+}
+
+SubVectorHandler&
+CyclocopterDMST::AssRes(SubVectorHandler& WorkVec,
+	doublereal dCoef,
+	const VectorHandler& XCurr,
+	const VectorHandler& XPrimeCurr)
+{
+	/* UNIFORM induced velocity */
+	/* Transpose of the rotor rotation matrix */
+	RRotor = pCraft->GetRCurr()*RRot;
+	RRotorTranspose = RRotor.Transpose();
+	/* Force in the rotor coordinate system */
+	F = RRotorTranspose*Res.Force();
+	if (!bFlagAverage || bFlagAverage) // For both the case it should do the same  
+	{
+		/* filter the forces */
+		Uk = F;
+		Yk = -Yk_1*a1 - Yk_2*a2 + Uk*b0 + Uk_1*b1 + Uk_2*b2;
+		F = Yk;
+
+		///////////////////////////////////////////////////////////////
+		// 2D Model
+		/* Force in the plane normal to the rotation axis */
+		doublereal dT = sqrt(F(2)*F(2) + F(3)*F(3));
+		/* Induced velocity: calculated according to dT */
+		doublereal dRho = dGetAirDensity(GetXCurr());
+		dUindMean = dKappa*sqrt(dT/(2*dRho*dArea));
+		/* Induced velocity components in the coordinate
+	 	* system of the rotor */
+		dUind = ::Zero3;
+		if (dT > std::numeric_limits<doublereal>::epsilon()) 
+		{
+			dUind(2) = dUindMean*F(2)/dT;
+			dUind(3) = dUindMean*F(3)/dT;
+		}
+		dUind(1) = (1 - dWeight)*dUind(1) + dWeight*dUindPrev(1);
+		dUind(2) = (1 - dWeight)*dUind(2) + dWeight*dUindPrev(2);
+		dUind(3) = (1 - dWeight)*dUind(3) + dWeight*dUindPrev(3);
+
+		dUindMean = sqrt(dUind(1)*dUind(1) + dUind(2)*dUind(2) + dUind(3)*dUind(3));
+
+
+		//////////////////////////////////////////////////////////////////////
+		// DMST Model
+		doublereal dKappaDMST = 1.15 ; // 3D effect 
+		Vec3 NetFroce = RRotorTranspose*Res.Force(); //(0, Fx, Fy) Net rotor force
+		
+		if (NetFroce.Norm() == 0) 
+		// At first time step NetForce is (0,0,0) but it should be nonzero vector because angle with respect to null vector is undefined 
+		{
+			//So randomly defining NetForce as a nonzero vector  
+			// it will be used only at first step
+			NetFroce(1) = 0.;
+			NetFroce(2) = 1.;
+			NetFroce(3) = 0.;
+		}
+
+		for (int i = 0; i < NBlades; ++i)
+		{
+			dBladeFroce[i] = RRotorTranspose*pBladeAero[i]->dGetForces(); // storing the all blade force 
+			dBladePos[i] = RRotorTranspose*pBladeAero[i]->dGetPosition(); // storind the position of blades
+			dAngleBtBladeAndNetforce[i] = acos(dBladePos[i].Dot(NetFroce)/sqrt(dBladePos[i].Dot(dBladePos[i] * NetFroce.Dot(NetFroce))));
+		}
+
+		// Updating the dIndVelMegAll  
+		for (int i = 0; i < NBlades; ++i)
+		{
+			 doublereal psi = atan2(dBladePos[i](3),dBladePos[i](2)); // Azimuth location of the blade i 
+			 if (psi < 0)
+			 {
+			 	psi = psi + 2*M_PI; // atan2() range (-PI, PI) so to make it (0, 2*PI) => -psi = psi + 2*PI 
+			 }
+			 int index = floor(psi/(dOmega*dDeltaT)); // where to change the induced velocity
+			 dIndVelMegAll[index] = sqrt((dKappaDMST*dBladeFroce[i].Norm()*NBlades*pow(sin((M_PI/2)-dAngleBtBladeAndNetforce[i]),2))/(4*M_PI*dRho*dRadius));
+		}
+		////////////////////////////////
+		// Upper half and Lower half both 
+		// Because until we have nonzero U_up, we can not get nonzero "w"  
+		// and without nonzero "w" the root method will not give U_d 
+		////////////////////////////////	
+		#if 1
+		if(EmptyCheck == true)
+		{
+			std::cout << "One" << std::endl;
+
+			// Calculating magnitude of Induced velocity of individual blade
+			for (int i = 0; i < NBlades; ++i)
+			{	
+				// Induced velocity magnitude is calculated using the blade force of the individual blade and the Azimuth location of the blade
+				dBladeUindMag[i] = sqrt((dKappaDMST*dBladeFroce[i].Norm()*NBlades*pow(sin((M_PI/2)-dAngleBtBladeAndNetforce[i]),2))/(4*M_PI*dRho*dRadius));
+
+				// Calculating the Induced velocity component for Upper half
+				dBladeUind[i] = ::Zero3;
+				if (dT > std::numeric_limits<doublereal>::epsilon())
+				{
+					// Option 1: Blade Azimuth location
+					dBladeUind[i](2) = dBladeUindMag[i]*dBladePos[i](2)/dBladePos[i].Norm();
+					dBladeUind[i](3) = dBladeUindMag[i]*dBladePos[i](3)/dBladePos[i].Norm();
+
+					// Option 2: Local blade net force vector direction
+					// dBladeUind[i](2) = dBladeUindMag[i]*dBladeFroce[i](2)/dBladeFroce[i].Norm();
+					// dBladeUind[i](3) = dBladeUindMag[i]*dBladeFroce[i](3)/dBladeFroce[i].Norm();
+					
+					// Option 3: Rotor, Net thrust vector direction
+					// dBladeUind[i](2) = dBladeUindMag[i]*F(2)/dT;
+					// dBladeUind[i](3) = dBladeUindMag[i]*F(3)/dT;
+
+					// Option 4: Given in the Article BRNDICT ET AL   
+					// dBladeUind[i](3) = -dBladeUindMag[i];
+ 			
+				}
+				dBladeUind[i](1) = (1 - dWeight)*dBladeUind[i](1) + dWeight*dBladeUindPrev[i](1);
+				dBladeUind[i](2) = (1 - dWeight)*dBladeUind[i](2) + dWeight*dBladeUindPrev[i](2);
+				dBladeUind[i](3) = (1 - dWeight)*dBladeUind[i](3) + dWeight*dBladeUindPrev[i](3);
+				// std::cout << dBladeUindMag[i] << std::endl;
+			}
+		}
+		#endif
+
+		if (EmptyCheck == false)
+		{
+			std::cout << "Both" << std::endl;
+			// Calculating magnitude of Induced velocity of individual blade
+			for (int i = 0; i < NBlades; ++i)
+			{	
+				////////////////////////////////
+				// Upper half
+				////////////////////////////////	
+				if (cos(dAngleBtBladeAndNetforce[i]) > 0) // Angle between NetForce and Blade position is in range (-PI/2, PI/2) 
+				{
+					// Induced velocity magnitude is calculated using the blade force of the individual blade and the Azimuth location of the blade
+					dBladeUindMag[i] = sqrt((dKappaDMST*dBladeFroce[i].Norm()*NBlades*pow(sin((M_PI/2)-dAngleBtBladeAndNetforce[i]),2))/(4*M_PI*dRho*dRadius));
+
+					// Calculating the Induced velocity component for Upper half
+					dBladeUind[i] = ::Zero3;
+					if (dT > std::numeric_limits<doublereal>::epsilon())
+					{
+						// Option 1: Blade Azimuth location
+						dBladeUind[i](2) = dBladeUindMag[i]*dBladePos[i](2)/dBladePos[i].Norm();
+						dBladeUind[i](3) = dBladeUindMag[i]*dBladePos[i](3)/dBladePos[i].Norm();
+
+						// Option 2: Local blade net force vector direction
+						// dBladeUind[i](2) = -dBladeUindMag[i]*dBladeFroce[i](2)/dBladeFroce[i].Norm();
+						// dBladeUind[i](3) = -dBladeUindMag[i]*dBladeFroce[i](3)/dBladeFroce[i].Norm();
+						
+						// Option 3: Given in the Article BRNDICT ET AL   
+						// dBladeUind[i](3) = -dBladeUindMag[i];	
+					}
+
+					dBladeUind[i](1) = (1 - dWeight)*dBladeUind[i](1) + dWeight*dBladeUindPrev[i](1);
+					dBladeUind[i](2) = (1 - dWeight)*dBladeUind[i](2) + dWeight*dBladeUindPrev[i](2);
+					dBladeUind[i](3) = (1 - dWeight)*dBladeUind[i](3) + dWeight*dBladeUindPrev[i](3);
+
+					// std::cout << dBladeUindMag[i] << std::endl;
+
+				}
+				/////////////////////////////////
+				// Lower half
+				/////////////////////////////////
+				else // (dAngleBtBladeAndNetforce[i]) < 0)
+				{
+					doublereal w;
+					int MirrorPointIndex; // Lower half blade position's mirror image point in the upper half 
+					// VECTOR ABOUT WHICH MIRROR IMAGE IS TAKEN, IS VECTOR ORTHOGNAL TO THE NetForce Vector which is = (0, -NetFroce(3), NetFroce(2)) 
+
+					Vec3 NetFroceOrtho = ::Zero3; // Vector Orthogonal to Net force Vector 
+					NetFroceOrtho(2) = NetFroce(3);  
+					NetFroceOrtho(3) = -NetFroce(2);  
+					
+					doublereal m = atan2(NetFroceOrtho(3), NetFroceOrtho(2)); // Slop of the line
+
+					doublereal a = dBladePos[i](2) ; 
+					doublereal b = dBladePos[i](3) ;
+					
+					doublereal c = ((2*(m*b+a))/(m*m+1)) - a ; // Mirror image point first coordinate  
+					doublereal d = ((2*m*(m*b+a))/(m*m+1)) - b ; // Mirror image point second coordinate 
+
+
+					doublereal MirrorAzimuth = atan2(d,c); // Mirror image point's Azimuth angle in the global frame 
+					if (MirrorAzimuth < 0)
+					{
+						MirrorAzimuth = MirrorAzimuth + 2*M_PI ; 
+					}
+					MirrorPointIndex = MirrorAzimuth / (dOmega*dDeltaT);
+					
+
+					w = 2*dIndVelMegAll[MirrorPointIndex]/sin(dAngleBtBladeAndNetforce[i] - M_PI/2);
+
+					//////////////////////////////////////////
+					//Find induced velocity using roots   
+					#if 1
+					// Direct root calculation method to find the induced velocity in lower-half of the rotor
+					float sinPhi = sin(dAngleBtBladeAndNetforce[i] - M_PI/2);
+					float Gamma = pow(((dKappaDMST*dBladeFroce[i].Norm()*NBlades)/(4*M_PI*dRho*dRadius)),2);
+					/*x1, x2, x3 and x4 are the roots of the 4th order polynomial*/
+					std::complex<double> x1 = 0+0j; 	
+					std::complex<double> x2 = 0+0j; 	
+					std::complex<double> x3 = 0+0j; 	
+					std::complex<double> x4 = 0+0j; 
+
+					std::complex<double> c1 = 1 + 0j; 	
+					std::complex<double> c2 = 2 + 0j; 	
+					std::complex<double> c3 = 3 + 0j; 	
+					std::complex<double> c4 = 4 + 0j; 	
+					std::complex<double> c6 = 6 + 0j; 	
+					std::complex<double> c8 = 8 + 0j; 	
+					std::complex<double> c9 = 9 + 0j; 	
+					std::complex<double> c12 = 12 + 0j; 	
+					std::complex<double> c16 = 16 + 0j; 	
+					std::complex<double> c27 = 27 + 0j; 	
+					std::complex<double> c36 = 36 + 0j; 	
+
+					std::complex<double> sinPhi_c = sinPhi + 0j; 	
+					std::complex<double> w_c = w + 0j; 	
+					std::complex<double> Gamma_c = Gamma + 0j; 	
+					
+					x1 = -c1/c2*sinPhi_c*w_c - c1/c2*sqrt(c2*pow(sinPhi_c,c2)*pow(w_c,c2) - c4/c3*pow(w_c,c2) - c1/c9*(pow(w_c,c4) -
+					c12*Gamma_c)/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c +
+					c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) -
+					c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) - c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)) +
+					c6*(pow(sinPhi_c,c3)*pow(w_c,c3) - sinPhi_c*pow(w_c,c3))/sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) - pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) - c1/c6*sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)));
+
+					x2 = -c1/c2*sinPhi_c*w_c + c1/c2*sqrt(c2*pow(sinPhi_c,c2)*pow(w_c,c2) - c4/c3*pow(w_c,c2) - c1/c9*(pow(w_c,c4) -
+					c12*Gamma_c)/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c +
+					c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) -
+					c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) - c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)) +
+					c6*(pow(sinPhi_c,c3)*pow(w_c,c3) - sinPhi_c*pow(w_c,c3))/sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) - pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) - c1/c6*sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)));
+
+
+					x3 = -c1/c2*sinPhi_c*w_c - c1/c2*sqrt(c2*pow(sinPhi_c,c2)*pow(w_c,c2) - c4/c3*pow(w_c,c2) - c1/c9*(pow(w_c,c4) -
+					c12*Gamma_c)/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c +
+					c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) -
+					c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) - c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)) -
+					c6*(pow(sinPhi_c,c3)*pow(w_c,c3) - sinPhi_c*pow(w_c,c3))/sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) - pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) + c1/c6*sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)));
+				
+					x4 = -c1/c2*sinPhi_c*w_c + c1/c2*sqrt(c2*pow(sinPhi_c,c2)*pow(w_c,c2) - c4/c3*pow(w_c,c2) - c1/c9*(pow(w_c,c4) -
+					c12*Gamma_c)/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c +
+					c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) -
+					c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) - c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)) -
+					c6*(pow(sinPhi_c,c3)*pow(w_c,c3) - sinPhi_c*pow(w_c,c3))/sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) - pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))) + c1/c6*sqrt((pow(w_c,c4) + c3*pow((c1/c27*pow(w_c,c6) -
+					c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3))*(c3*pow(sinPhi_c,c2) - c2)*pow(w_c,c2) - c12*Gamma_c + c9*pow((c1/c27*pow(w_c,c6)
+					- c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) - c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) -
+					c1)*pow(w_c,c8) - (c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c2/c3)))/pow((c1/c27*pow(w_c,c6) - c2/c3*(c3*pow(sinPhi_c,c2)*pow(w_c,c2) -
+					c2*pow(w_c,c2))*Gamma_c + c2/c3*sqrt(c1/c3)*sqrt(-((pow(sinPhi_c,c2) - c1)*pow(w_c,c8) -
+					(c27*Gamma_c*pow(sinPhi_c,c4) - c36*Gamma_c*pow(sinPhi_c,c2) + c8*Gamma_c)*pow(w_c,c4) -
+					c16*pow(Gamma_c,c2))*Gamma_c)),(c1/c3)));
+
+
+
+					// Choose the real positive root 
+					if (x1.real() > 0 && fabs(x1.imag()) < 0.000001)
+						{
+							dBladeUindMag[i] = x1.real() ;
+						}else if(x2.real() > 0 && fabs(x2.imag()) < 0.000001)
+						{
+							dBladeUindMag[i] = x2.real() ;
+						}else if(x3.real() > 0 && fabs(x3.imag()) < 0.000001)
+						{
+							dBladeUindMag[i] = x3.real();
+						}else if(x4.real() > 0 && fabs(x4.imag()) < 0.000001)
+						{
+							dBladeUindMag[i] = x4.real();
+						}		
+
+					doublereal MagHold = dBladeUindMag[i]; 
+					// Hold the value from Analytical method to compare it with bisection method   	
+					#endif
+					
+					#if 1
+					// Find dBladeUindMag[i] using Bisection method
+					doublereal dUindLowLimit = 0.;
+					doublereal dUindUpLimit = 100. ;
+					doublereal functionValue  ;
+					doublereal tol = 1e-12; // tolerance in calculating the root of the equation
+					doublereal DomainLenght = dUindUpLimit - dUindLowLimit ;
+
+					while (DomainLenght > tol) // iterative method to find the induced velocity in lower half of the rotor
+					{
+						dBladeUindMag[i] = (dUindLowLimit + dUindUpLimit)/2.0 ;
+						functionValue = ( pow(dBladeUindMag[i],2) * ( pow(w,2) + 2*dBladeUindMag[i]*w*sin(dAngleBtBladeAndNetforce[i] - M_PI/2) + pow(dBladeUindMag[i],2) )
+						 - pow(((dKappaDMST*dBladeFroce[i].Norm()*NBlades)/(4*M_PI*dRho*dRadius)),2) ) ;
+
+						if( functionValue >= 0.)
+						{
+							dUindUpLimit = dBladeUindMag[i] ;
+						}else
+						{
+							dUindLowLimit = dBladeUindMag[i] ;
+						}
+						DomainLenght = fabs(dUindUpLimit - dUindLowLimit);
+					};
+					#endif
+
+					//comparision of analytical and bisection method	
+					// std::cout << MagHold << "\t" << dBladeUindMag[i] << std::endl;
+
+					// Calculating the Induced velocity component Lower Half
+					dBladeUind[i] = ::Zero3;
+					if (dT > std::numeric_limits<doublereal>::epsilon())
+					{
+						// Option 1: Blade Azimuth location
+						dBladeUind[i](2) = dBladeUindMag[i]*dBladePos[i](2)/dBladePos[i].Norm() - w*NetFroce(2)/NetFroce.Norm();
+						dBladeUind[i](3) = dBladeUindMag[i]*dBladePos[i](3)/dBladePos[i].Norm() - w*NetFroce(3)/NetFroce.Norm();
+
+						// Option 2: Local blade net force vector direction
+						// dBladeUind[i](2) = dBladeUindMag[i]*dBladeFroce[i](2)/dBladeFroce[i].Norm() - w*NetFroce(2)/NetFroce.Norm();
+						// dBladeUind[i](3) = dBladeUindMag[i]*dBladeFroce[i](3)/dBladeFroce[i].Norm() - w*NetFroce(3)/NetFroce.Norm();
+						
+						// Option 3: According to the Article BRNDICT ET AL   
+						// dBladeUind[i](2) = dBladeUindMag[i] + w*dBladePos[i](3)/dBladePos[i].Norm();		
+						// dBladeUind[i](3) = w*dBladePos[i](2)/dBladePos[i].Norm();		
+					}
+
+					dBladeUind[i](1) = (1 - dWeight)*dBladeUind[i](1) + dWeight*dBladeUindPrev[i](1);
+					dBladeUind[i](2) = (1 - dWeight)*dBladeUind[i](2) + dWeight*dBladeUindPrev[i](2);
+					dBladeUind[i](3) = (1 - dWeight)*dBladeUind[i](3) + dWeight*dBladeUindPrev[i](3);
+					///////////////////////////////////////////
+				}   
+			}
+		}
+	}
+
+	ResetForce();
+	WorkVec.Resize(0);
+	return WorkVec;
+}
+
+void
+CyclocopterDMST::AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X)
+{
+	/* Calculates the azimuth position of the first blade */
+	// if (bFlagIsFirstBlade && bFlagAverage) {
+	if (bFlagIsFirstBlade) 
+	{
+		Vec3 XRel(RRotorTranspose*(X - pRotor->GetXCurr()));
+		doublereal d1 = XRel(2);
+		doublereal d2 = XRel(3);
+		dAzimuth = atan2(d2, d1);
+		bFlagIsFirstBlade = false;
+	}
+
+	/* Calculates the moment only if output is required */
+	if (bToBeOutput()) 
+	{
+		Res.AddForces(F, M, X);
+		InducedVelocity::AddForce(pEl, pNode, F, M, X);
+	} else 
+	{
+		Res.AddForce(F);
+	}
+}
+
+Vec3
+CyclocopterDMST::GetInducedVelocity(Elem::Type type,
+	unsigned uLabel, unsigned uPnt, const Vec3& X) const
+{
+	//printf("%f %f %f\n",dUind(1),dUind(2),dUind(3));
+	Vec3 dUindSet;
+	for (int i = 0; i < NBlades; ++i)
+	{
+		if (uLabel == uBlade[i])
+		{
+			dUindSet = dBladeUind[i];
+		}
+	}
+
+	if (uLabel == uBlade[0]) // First blade
+	{
+		doublereal Blade1Azimuth = atan2(X(2),X(1));
+		if (Blade1Azimuth < 0)
+		{
+			Blade1Azimuth = Blade1Azimuth + 2*M_PI ;
+		}
+	}
+
+	std::cout << uLabel << "\t" << "2D" << "\t" << dUind << "\t" << "DMST" << "\t" << dUindSet << std::endl;
+	
+	// return RRotor*dUindSet;
+	return RRotor*dUind;
+}
+
+/* CyclocopterDMST - end */
+
+#endif
+
+
+
 #if 0 // KARI NOT IMPLEMENTED YET!
 
 /* CyclocopterKARI - begin */
@@ -1580,18 +2396,18 @@
 		DataManager* pDM, MBDynParser& HP);
 	virtual ~CyclocopterKARI(void);
 
-	// Elaborazione stato interno dopo la convergenza
+	// Elaborate internal state after convergence
 	virtual void
 	AfterConvergence(const VectorHandler& X, const VectorHandler& XP);
 
-	// output; si assume che ogni tipo di elemento sappia,
-	// attraverso l'OutputHandler, dove scrivere il proprio output
+	// output; it is assumed that each element knows,
+	// by the OutputHandler, where to write its own output
 	virtual void Output(OutputHandler& OH) const;
 
-	// Contributo al file di Restart
+	// Contribution to the restart file
 	virtual std::ostream& Restart(std::ostream& out) const;
 
-	// assemblaggio residuo
+	// residual assembly
 	virtual SubVectorHandler&
 	AssRes(SubVectorHandler& WorkVec,
 		doublereal dCoef,
@@ -1599,19 +2415,19 @@
 		const VectorHandler& XPrimeCurr);
 
 #if 0
-	// Somma alla trazione il contributo di un elemento
+	// Adds to the forces the contribution from an element
 	virtual void
 	AddForce(const Elem *pEl, const StructNode *pNode, const Vec3& F, const Vec3& M, const Vec3& X);
 #endif
 
-	// Restituisce ad un elemento la velocita' indotta
-	// in base alla posizione azimuthale
+	// Restores the induced velocity to an element
+	// based on the azimuth position
 	virtual Vec3 GetInducedVelocity(Elem::Type type,
 		unsigned uLabel, unsigned uPnt, const Vec3& X) const;
 
-	// *******PER IL SOLUTORE PARALLELO********
-	// Fornisce il tipo e la label dei nodi che sono connessi all'elemento
-	// utile per l'assemblaggio della matrice di connessione fra i dofs
+	// *******FOR PARALLEL SOLVER********
+	// Provides the type and label of the nodes connected to the element
+	// useful for the assembly of the DOF connexion matrix
 	virtual void
 	GetConnectedNodes(std::vector<const Node *>& connectedNodes) const;
 	// ************************************************
@@ -1738,6 +2554,17 @@
 			<< std::endl);
 
 		return false;
+	}
+
+	rf = new UDERead<CyclocopterDMST>;
+	if (!SetUDE("cyclocopter" "DMST", rf)) {
+		delete rf;
+
+		silent_cerr("module-cyclocopter: "
+			"unable to register \"cyclocopter DMST\""
+			<< std::endl);
+
+		return false;
 	}
 
 #if 0
